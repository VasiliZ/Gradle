import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.github.rtyvz.myapplication'
}

apply from: "$rootDir/build_scripts/dependencies.gradle"

android {

    compileSdk 32
    defaultConfig {
        applicationId "com.github.rtyvz.myapplication"
        minSdk 28
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }

        debug {
            applicationIdSuffix = ".debug"
            minifyEnabled true
            debuggable true
        }

        newBuildType {
            minifyEnabled true
            debuggable true
            initWith debug
            versionNameSuffix ".newBuildType"
        }
    }

    splits {
        density {
            enable = true
            exclude "ldpi", "xxhdpi", "xxxhdpi"
            compatibleScreens("small", "normal", "large", "xlarge")
        }
    }

    flavorDimensions = ['version']

    productFlavors {
        dev {
            dimension = "version"
            versionNameSuffix = ".dev"
        }

        prod {
            dimension = "version"
            versionNameSuffix = ".prod"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }

    sourceSets {
        dev {
            res {
                srcDirs "..\\src\\main\\res"
            }
        }

        prod {
            res {
                srcDirs "..\\src\\debug\\res"
            }
        }
    }

    dependencies {
        implementation coreDependencies.values()
        implementation navigation.values()

    }

    tasks.register("copyJni") {
        it.doLast {
            String flavour = getCurrentFlavour().toString()
            String targetPath = createTargetDir(flavour)
            copyFile(targetPath)
        }
    }
}

tasks.named("preBuild") {
    it.finalizedBy("copyJni")
}

def getCurrentFlavour() {
    String taskRequests = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern

    if (taskRequests.contains("assemble")) {
        pattern = Pattern.compile("assemble(\\w+)(Debug|Release)")
    } else {
        pattern = Pattern.compile("generate(\\w+)(Debug|Release)")
    }

    Matcher matcher = pattern.matcher(taskRequests)
    if (matcher.find()) {
        return matcher.group(1).toLowerCase()
    } else {
        return ""
    }
}

def createTargetDir(String targetDirName) {
    String rootPath = "$rootDir" + "\\" + "rootDirForCopy"
    delete(rootPath)
    mkdir(rootPath + "\\" + targetDirName)
    return rootPath + "\\" + targetDirName
}

def copyFile(String targetPath) {
    copy {
        from("D:\\testDir\\simple.cpp")
        into(targetPath)
    }
}





